MINI CATALOG E-COMMERCE APP - COMPONENT STRUCTURE
========================================================

📁 PROJECT ARCHITECTURE
=======================

🔧 TECH STACK
--------------
- Next.js 14+ with App Router
- TypeScript (functional components only)
- Material-UI (MUI) v5+ with SSR support
- Supabase for authentication, database, and RLS
- TanStack Query (React Query) for client-side caching
- Emotion for CSS-in-JS styling

📂 ROOT LEVEL STRUCTURE
=======================

src/
├── 📁 api/                    # Backend API interfaces
├── 📁 components/             # React UI components
├── 📁 config/                 # Configuration files
├── 📁 context/                # React Context providers
├── 📁 hooks/                  # Custom React hooks
├── 📁 hypay/                  # Payment integration
├── 📁 lib/                    # External library configs
├── 📁 pages/                  # Page components
├── 📁 providers/              # App-level providers
├── 📁 routes/                 # Route configurations
├── 📁 styles/                 # Global stylesheets
├── 📁 theme/                  # MUI theme configuration
├── 📁 utils/                  # Utility functions
├── App.js                     # Main app component
├── index.css                  # Global styles
└── index.js                   # App entry point

🏗️ DETAILED COMPONENT BREAKDOWN
===============================

📂 API LAYER (src/api/)
=======================
├── orders.js                 # Order management API calls
├── prices.js                 # Pricing data API calls
├── products.js               # Product catalog API calls
└── settings.js               # Application settings API

📂 COMPONENTS (src/components/)
===============================

🔐 AUTHENTICATION (auth/)
--------------------------
├── AuthCallback.js           # OAuth callback handler
├── AuthDialog.js             # Login/signup modal dialog
├── Login.js                  # Main login component
├── SignInForm.js             # Sign-in form component
├── SignUpForm.js             # Sign-up form component
└── signup/
    ├── PasswordStrengthIndicator.js    # Password validation UI
    ├── SignUpFormFields.js             # Form input fields
    ├── signUpValidation.js             # Validation logic
    └── SocialLoginButtons.js           # Google/social login

👑 ADMIN PANEL (admin/)
-----------------------
├── Admin.js                  # Main admin dashboard
├── AdminSystemInfo.js        # System information display
├── DashboardOverview.js      # Admin dashboard overview
├── OrdersTab.js             # Orders management tab
├── ProductsTab.js           # Products management tab
├── data/
│   ├── AdminOrdersTable.js   # Orders data table
│   ├── AdminProductsTable.js # Products data table
│   ├── OrderRow.js          # Individual order row
│   └── ProductRow.js        # Individual product row
├── dialogs/
│   └── AdminDialogs.js      # Admin modal dialogs
├── forms/
│   ├── CompanySettings.js   # Company settings form
│   ├── CsvImport.js        # CSV import functionality
│   ├── ProductForm.js      # Product creation/editing
│   ├── company/
│   │   ├── CompanyInfoSection.js     # Company info form
│   │   ├── CompanyPreview.js         # Company preview
│   │   ├── ContactInfoSection.js     # Contact info form
│   │   └── InvoiceSettingsSection.js # Invoice settings
│   └── csv/
│       ├── FileUploadSection.js      # CSV file upload
│       ├── ImportConfirmDialog.js    # Import confirmation
│       ├── ImportResults.js          # Import results display
│       └── PreviewSection.js         # CSV preview
├── orders/
│   ├── OrderDetails.js       # Order details view
│   ├── OrderDetailsHeader.js # Order header info
│   ├── OrderItemsTable.js    # Order items table
│   └── OrderSummarySection.js # Order summary
└── tabs/
    └── AdminTabsRenderer.js  # Admin tab navigation

🛍️ CATALOG & PRODUCTS (catalog/)
---------------------------------
├── CatalogClean.js           # Main catalog container
├── CatalogLayout.js          # Catalog layout wrapper
├── ContentRenderer.js        # Content rendering logic
├── FilterPanel.js            # Filter controls panel
├── ImageGallery.js           # Product image gallery
├── ImageZoomDialog.js        # Image zoom modal
├── LoadingIndicator.js       # Loading state UI
├── ProductAccordionContent.js # Product accordion content
├── ProductCard.js            # Product card display
├── ProductDetailsDialog.js   # Product details modal
├── ProductDisplay.js         # Product display wrapper
├── ProductListItem.js        # Product list item (mobile-optimized)
├── ProductRenderer.js        # Product rendering logic
├── SimpleQuantityInput.js    # Simple quantity input
├── desktop/
│   ├── DesktopFilterContent.js       # Desktop filter content
│   ├── FilterChipGroup.js            # Filter chip groups
│   ├── FilterSection.js              # Individual filter section
│   └── FilterSidebar.js              # Desktop filter sidebar
└── mobile/
    ├── FilterSelect.js               # Mobile filter select
    ├── MobileFilterChips.js          # Mobile filter chips
    ├── MobileFilterControls.js       # Mobile filter controls
    └── MobileFilterDrawer.js         # Mobile filter drawer

🔄 COMMON/SHARED (common/)
--------------------------
├── PriceDisplay.js           # Price display component
├── ProductImage.js           # Product image component
├── ProductInfo.js            # Product information display
├── ProductRef.js             # Product reference display
├── ProductSize.js            # Product size display
├── QuantityInput.js          # Quantity input controls
├── ResponsiveConfig.js       # Responsive configuration
├── SearchHeader.js           # Search bar component
├── SkeletonLoading.js        # Loading skeleton UI
└── UnifiedCartItem.js        # Unified cart item (compact/detailed variants)

🏗️ LAYOUT (layout/)
-------------------
├── JDAHeader.js              # Main application header
├── VendorDashboardLayout.js  # Vendor dashboard layout
├── dashboard/
│   ├── DashboardAppBar.js    # Dashboard app bar
│   ├── DashboardNavigation.js # Dashboard navigation
│   ├── DashboardSidebar.js   # Dashboard sidebar
│   └── DashboardStyles.js    # Dashboard styling
└── header/
    ├── AccountMenu.js        # User account menu
    ├── MainToolbar.js        # Main toolbar
    ├── NavigationData.js     # Navigation data
    ├── NavigationMenu.js     # Navigation menu
    └── TopBar.js            # Top bar component

📝 ORDER FORM (orderform/)
--------------------------
├── index.js                  # Order form barrel export
├── AdminAddItemDialog.js     # Admin add item dialog
├── CartItemsTable.js         # Cart items table (mobile-optimized)
├── EmptyCartView.js          # Empty cart state
├── InlineAddItemRow.js       # Inline item addition
├── OrderForm.js              # Main order form
├── OrderSuccessView.js       # Order success page
└── OrderSummary.js           # Order summary component

💳 PAYMENT (payment/)
--------------------
[Currently empty - payment logic in hypay/ folder]

🎨 UI COMPONENTS (ui/)
---------------------
├── ErrorBoundary.js          # Error boundary wrapper
├── OptimizedImage.js         # Optimized image component
├── StyledButton.js           # Custom styled button
└── SupabaseError.js          # Supabase error display

📂 CONTEXT PROVIDERS (src/context/)
===================================
├── AuthContext.js            # Authentication state management
├── CartContext.js            # Shopping cart state management
└── CompanyContext.js         # Company settings state management

📂 CUSTOM HOOKS (src/hooks/)
============================
├── useAdminAccess.js         # Admin access control
├── useAdminData.js           # Admin data fetching
├── useCatalogFilters.js      # Catalog filtering logic
├── useCompanySettings.js     # Company settings management
├── useCsvImport.js           # CSV import functionality
├── useOrderCalculations.js   # Order calculations
├── useOrderSubmission.js     # Order submission logic
├── usePriceLoader.js         # Price loading logic
├── usePricing.js             # Pricing data management
├── useProductsInfiniteQuery.js # Infinite scroll products
└── useSupabaseAuth.js        # Supabase authentication

📂 PAYMENT INTEGRATION (src/hypay/)
===================================
├── README.md                 # Payment integration docs
├── index.js                  # Hypay barrel export
├── api/
│   ├── hypay.js             # Hypay API integration
│   └── webhooks.js          # Payment webhooks
├── components/
│   ├── index.js             # Components barrel export
│   ├── HypayPayment.js      # Hypay payment component
│   ├── OrderFormWithPayment.js # Order form with payment
│   ├── PaymentDialog.js     # Payment modal dialog
│   └── QuickPaymentPage.js  # Quick payment page
└── hooks/
    ├── index.js             # Hooks barrel export
    ├── useOrderSubmissionWithPayment.js # Order + payment
    └── usePayment.js        # Payment hook

📂 CONFIGURATION & UTILITIES
============================

Config (src/config/)
-------------------
└── supabase.js              # Supabase client configuration

Library (src/lib/)
------------------
└── queryClient.js           # React Query client setup

Pages (src/pages/)
------------------
├── index.js                 # Main page component
└── site/
    ├── index.js             # Site page
    └── QuickPaymentPage.js  # Quick payment page

Providers (src/providers/)
-------------------------
└── AppProviders.js          # App-level provider wrapper

Routes (src/routes/)
-------------------
└── SiteRoutes.js            # Application routing

Styles (src/styles/)
-------------------
└── print.css               # Print-specific styles

Theme (src/theme/)
-----------------
└── deepTheme.js             # MUI theme configuration

Utils (src/utils/)
-----------------
├── csvHelpers.js            # CSV processing utilities
├── dataHelpers.js           # Data manipulation utilities
└── imageHelpers.js          # Image processing utilities

🎯 KEY RESPONSIVE COMPONENTS
============================

📱 MOBILE-OPTIMIZED COMPONENTS:
├── ProductListItem.js       # Ultra-small, small, regular mobile layouts
├── UnifiedCartItem.js       # Compact/detailed variants with mobile optimization
├── CartItemsTable.js        # Mobile-friendly cart table
├── MobileFilterDrawer.js    # Mobile filter sidebar
├── SearchHeader.js          # Mobile search with filter button
└── OrderForm.js             # Mobile-responsive order form

💻 DESKTOP-FOCUSED COMPONENTS:
├── FilterSidebar.js         # Desktop filter panel
├── AdminProductsTable.js    # Desktop admin tables
├── DashboardSidebar.js      # Desktop admin navigation
└── DesktopFilterContent.js  # Desktop filter interface

🔧 ARCHITECTURE PATTERNS
========================

📊 STATE MANAGEMENT:
├── React Context API for global state (Auth, Cart, Company)
├── TanStack Query for server state caching
├── Local component state for UI interactions
└── Custom hooks for business logic encapsulation

🎨 STYLING APPROACH:
├── MUI v5 with Emotion CSS-in-JS
├── Theme-based design system
├── Responsive design with useMediaQuery
├── Mobile-first approach with breakpoint-specific layouts
└── sx prop for component-level styling

🔐 AUTHENTICATION & AUTHORIZATION:
├── Supabase Auth for user authentication
├── Row Level Security (RLS) for data access
├── Role-based admin access (user_role = 'admin')
├── Price visibility based on authentication status
└── Protected routes and component rendering

📱 RESPONSIVE DESIGN:
├── Mobile-first approach
├── Breakpoints: xs(0), sm(600), md(900), lg(1200), xl(1536)
├── Ultra-small mobile detection (≤450px)
├── Conditional component rendering
├── Optimized mobile layouts for catalog and cart
└── Touch-friendly interface design

🚀 PERFORMANCE OPTIMIZATIONS:
├── React.memo for component memoization
├── useCallback for function memoization
├── Infinite scroll for product loading
├── Image optimization and lazy loading
├── TanStack Query for efficient data fetching
└── Bundle splitting and code optimization

This structure represents a comprehensive e-commerce catalog application with:
- Role-based admin panel
- Mobile-optimized shopping experience
- Integrated payment processing
- Responsive design across all screen sizes
- Supabase backend with authentication and RLS
- Modern React patterns and performance optimizations
