# PROJECT CONTEXT
This project is a MINI CATALOG E-COMMERCE APP built with React, Material-UI v5, Supabase, and TanStack Query.  
The app contains:
- Authentication (Supabase Auth)
- Role-based admin panel
- Product catalog with filters and infinite scroll
- Integrated Hypay payment processing
- Mobile-first responsive design

# GOAL
Convert the existing React project into **Next.js 14+ (App Router)** with:
- TypeScript support (functional components only)
- MUI v5 with full SSR support
- Supabase Auth, RLS, and API integration
- TanStack Query for data fetching/caching
- SEO-friendly pages and API routes

# ARCHITECTURE & FILE ORGANIZATION
Follow this structure (keep as much of the original component breakdown as possible):

src/
├── api/           # API calls (server or client)
├── components/    # UI components grouped by domain (auth, admin, catalog, etc.)
├── config/        # Supabase config and env handling
├── context/       # Context providers (Auth, Cart, Company)
├── hooks/         # Custom hooks
├── hypay/         # Payment integration logic
├── lib/           # QueryClient, Supabase client
├── app/           # Next.js App Router pages/layouts
├── providers/     # App-level providers (ThemeProvider, QueryClientProvider)
├── routes/        # Route configs
├── styles/        # Global styles
├── theme/         # MUI theme config
└── utils/         # Utilities

# CONVERSION REQUIREMENTS
- Migrate pages to `/app` directory using Next.js server components where possible.
- Use Next.js API routes for backend logic that was in src/api.
- Ensure MUI works with SSR (use `AppRouterCacheProvider` and `ThemeProvider`).
- Ensure Supabase Auth works with server components (middleware + `createServerComponentClient`).
- Preserve TanStack Query patterns (hydrate data for SSR if needed).
- Maintain existing responsive behavior and component breakdown.
- Optimize for SEO: use `metadata` in layouts/pages.
- Avoid rewriting business logic unnecessarily — migrate structure, not behavior.

# CODING STYLE
- TypeScript everywhere (types/interfaces for props and API responses)
- Use `async/await` for data fetching
- Use `sx` prop for MUI styling (not inline styles)
- Prefer server components for read-only pages, client components only where necessary (forms, auth, interactive UI)
