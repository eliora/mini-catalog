CURSORRULES
===========

PROJECT CONTEXT
- Target stack: Next.js (v15.53), MUI v7, TypeScript.
- Goal: Module-by-module migration fixing two top ESLint rules acrosS files:
  1) @typescript-eslint/no-explicit-any
  2) @typescript-eslint/no-unused-vars
- Philosophy: Fix, don‚Äôt workaround. Reuse components. Keep files <= 300 lines.

------------------------------------------------------------
üî• MANDATORY PRE-CODE WORKFLOW (EVERY TIME)
------------------------------------------------------------
1) ALWAYS run:           npm run lint
2) Fix all ESLint issues ‚Üí rerun lint until clean.
3) ALWAYS run:           npx tsc --noEmit --skipLibCheck
4) Only when both pass ‚Üí npm run build
5) Never fix lint + type errors in same pass ‚Äî handle separately.

------------------------------------------------------------
üõ† PROVEN ERROR-FIXING METHOD (FILE-BY-FILE)
------------------------------------------------------------
1) When overwhelmed, use File-by-File:
   npm run lint -- path/to/file.tsx
2) Fix ALL warnings/errors in ONE file before moving on.
3) Priority order:
   - TypeScript errors (fix first)
   - ESLint errors (fix second)
   - ESLint warnings (last)
4) Track progress:
   npm run lint 2>&1 | Select-String "problems"
   Number should go down over time.
5) Verify each fix: npx tsc --noEmit

------------------------------------------------------------
ESLINT RULES (ZERO TOLERANCE)
------------------------------------------------------------
- No global disables.
- no-unused-vars: DELETE immediately or rename to `_var` if intentionally unused.
- no-explicit-any: DO NOT use `any`. Use proper interface or `unknown` + cast.
- @next/next/no-img-element: REPLACE with next/image ALWAYS.
- Auto-fixable rules ‚Üí run eslint --fix.
- Emergency only: `// eslint-disable-next-line @typescript-eslint/no-explicit-any` with a TODO and justification.

Recommended snippet to enable autofix-removal of unused imports:
(put in .eslintrc)
{
  "plugins": ["unused-imports"],
  "rules": {
    "@typescript-eslint/no-unused-vars": "off",
    "unused-imports/no-unused-imports": "error",
    "unused-imports/no-unused-vars": ["warn", { "vars": "all", "varsIgnorePattern": "^_", "args": "after-used", "argsIgnorePattern": "^_" }]
  }
}

------------------------------------------------------------
TYPESCRIPT RULES (CRITICAL)
------------------------------------------------------------
- Always run: npx tsc --noEmit --skipLibCheck
- FORBIDDEN: No `as any` unless accompanied by an eslint-disable comment and TODO.
- REQUIRED: Create minimal types in src/types/.
- Pattern for unsafe casts: `as unknown as SpecificType` (use sparingly).
- For Supabase: always create table interfaces and use them.
- Ensure caller/callee signatures match.

------------------------------------------------------------
REACT HOOKS (CRITICAL)
------------------------------------------------------------
- useCallback for functions used in deps.
- Include ALL dependencies in useMemo/useCallback/useEffect.
- Do NOT include outer-scope constants that will never change; prefer single source of truth hooks.
- Remove unnecessary deps (example: do not include cart.items when cart is in deps).

------------------------------------------------------------
COMPONENT & FILE MANAGEMENT
------------------------------------------------------------
- MAX 250 lines/file (hard guideline). Split immediately if > 250.
- Functional components + hooks only (no class components).
- Shared logic ‚Üí src/hooks/
- API/DB logic ‚Üí src/api/
- Delete unused imports/variables immediately.
- Always search repo to REUSE existing components before creating new:
  - Search patterns: `src/components`, `ui/`, `shared/`, `common/`
- When extracting, create small presentational components + container hooks.

------------------------------------------------------------
API ROUTES (Next.js app router)
------------------------------------------------------------
- Use named exports only: export async function GET(...) { ... }
- Signature: (req: NextRequest) => NextResponse | Promise<NextResponse>
- Always return NextResponse.json(...)
- Keep handlers small; business logic lives in src/api/

------------------------------------------------------------
NEXT.JS BEST PRACTICES
------------------------------------------------------------
- FORBIDDEN: <img> tags ‚Äî always use next/image with required props.
- Pattern: <Image src={src} alt={alt} fill style={{ objectFit: 'contain' }} />
- Ensure images are optimized and sizes specified where possible.

------------------------------------------------------------
COMPONENT REUSE & REFRACTORING RULES
------------------------------------------------------------
- ALWAYS check existing components first. Reuse > recreate.
- Props must be typed; preferrably create small interfaces in src/types/
- Extract visuals (MUI presentational) vs logic (custom hook)
- Unit-test important business logic (optional but recommended)

------------------------------------------------------------
NO WORKAROUNDS / PREFER FIX
------------------------------------------------------------
- Do not suppress types or lint rules to ‚Äúship faster‚Äù.
- If a fix requires refactor, do the refactor.
- If a temporary suppression is absolutely necessary: add comment with reason + TODO + owner + date.

------------------------------------------------------------
GENERAL EXCELLENCE RULES
------------------------------------------------------------
- Keep code short and DRY.
- Aggressively remove dead code and unused imports.
- English comments only.
- Immediate fixes ‚Äî do not accumulate debt.

------------------------------------------------------------
EXAMPLE MINI WORKFLOW (file-by-file)
------------------------------------------------------------
1) Inspect file:
   npm run lint -- src/components/Example.tsx

2) Fix types first:
   edit file ‚Üí run npx tsc --noEmit --skipLibCheck (repeat until clear)

3) Remove unused imports:
   npx eslint --fix src/components/Example.tsx
   or
   npm run lint -- --fix src/components/Example.tsx

4) Verify ESLint:
   npm run lint -- src/components/Example.tsx

5) Run all checks:
   npm run lint && npx tsc --noEmit --skipLibCheck

6) Build:
   npm run build

------------------------------------------------------------
NOTES
- ALWAYS read docs when unsure:
  https://nextjs.org/docs
  https://mui.com/material-ui/getting-started/
- Prefer small, incremental, reviewed PRs ‚Äî module-by-module.
- When refactoring, run tests (if present) and static checks.

END OF CURSORRULES
